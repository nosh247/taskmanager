name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api/**'
      - '.github/workflows/api-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'api/**'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: TestPassword123
          ACCEPT_EULA: Y
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123 -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json

    - name: Install dependencies
      working-directory: ./api
      run: npm ci

    - name: Wait for SQL Server
      run: |
        timeout 60 bash -c 'until /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123 -Q "SELECT 1"; do sleep 1; done'

    - name: Setup test database
      working-directory: ./api
      run: |
        # Run database schema and stored procedures
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123 -i ../sql/schema.sql
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123 -i ../sql/stored-procedures.sql

    - name: Run linting
      working-directory: ./api
      run: npm run lint

    - name: Run type checking
      working-directory: ./api
      run: npm run type-check

    - name: Run unit tests
      working-directory: ./api
      run: npm test -- --coverage --watchAll=false
      env:
        SQL_CONNECTION_STRING: "Server=localhost,1433;Database=TaskManager;User Id=sa;Password=TestPassword123;TrustServerCertificate=true;"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage/lcov.info
        flags: backend
        name: backend-coverage

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: TestPassword123
          ACCEPT_EULA: Y
          MSSQL_PID: Developer
        ports:
          - 1433:1433

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json

    - name: Install dependencies
      working-directory: ./api
      run: npm ci

    - name: Wait for SQL Server
      run: |
        timeout 60 bash -c 'until /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123 -Q "SELECT 1"; do sleep 1; done'

    - name: Setup test database
      working-directory: ./api
      run: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123 -i ../sql/schema.sql
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123 -i ../sql/stored-procedures.sql

    - name: Run integration tests
      working-directory: ./api
      run: npm run test:integration
      env:
        SQL_CONNECTION_STRING: "Server=localhost,1433;Database=TaskManager;User Id=sa;Password=TestPassword123;TrustServerCertificate=true;"

  build:
    runs-on: ubuntu-latest
    needs: [test, integration-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json

    - name: Install dependencies
      working-directory: ./api
      run: npm ci

    - name: Build application
      working-directory: ./api
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-build
        path: api/dist
        retention-days: 7

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json

    - name: Install dependencies
      working-directory: ./api
      run: npm ci

    - name: Run security audit
      working-directory: ./api
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'TaskManager-Backend'
        path: './api'
        format: 'HTML'
        out: './reports'
        args: >
          --failOnCVSS 7
          --enableRetired

  performance:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json

    - name: Install dependencies
      working-directory: ./api
      run: npm ci

    - name: Run performance tests
      working-directory: ./api
      run: npm run test:performance

    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: api/performance-results
        retention-days: 30 