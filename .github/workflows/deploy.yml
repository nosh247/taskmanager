name: Deploy to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './api'
  AZURE_WEBAPP_NAME: taskmanager-api
  AZURE_STATIC_WEBAPP_NAME: taskmanager-client

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: api/package-lock.json

    - name: Install dependencies
      working-directory: ./api
      run: npm ci

    - name: Build application
      working-directory: ./api
      run: npm run build

    - name: Deploy to Azure Functions
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

    - name: Deploy database schema
      run: |
        # Deploy database schema using Azure CLI
        az sql db create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --server ${{ secrets.AZURE_SQL_SERVER }} \
          --name TaskManager \
          --edition Basic \
          --capacity 5 \
          --max-size 2GB

    - name: Run database migrations
      run: |
        # Run schema and stored procedures
        sqlcmd -S ${{ secrets.AZURE_SQL_SERVER }}.database.windows.net \
          -d TaskManager \
          -U ${{ secrets.AZURE_SQL_USERNAME }} \
          -P ${{ secrets.AZURE_SQL_PASSWORD }} \
          -i sql/schema.sql \
          -i sql/stored-procedures.sql

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Build application
      working-directory: ./client
      run: npm run build
      env:
        VITE_API_BASE_URL: ${{ secrets.API_BASE_URL }}

    - name: Deploy to Azure Static Web Apps
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "/client/dist"
        app_build_command: "npm run build"
        deployment_environment: ${{ github.event.inputs.environment || 'staging' }}

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Application Insights
      run: |
        az monitor app-insights component create \
          --app taskmanager-insights \
          --location eastus \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --application-type web

    - name: Configure monitoring
      run: |
        # Configure Application Insights for Functions
        az monitor app-insights component connect-function \
          --app taskmanager-insights \
          --function-app ${{ env.AZURE_WEBAPP_NAME }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}

    - name: Setup custom domain (production only)
      if: github.event.inputs.environment == 'production'
      run: |
        # Configure custom domain for production
        az staticwebapp hostname set \
          --name ${{ env.AZURE_STATIC_WEBAPP_NAME }} \
          --hostname ${{ secrets.CUSTOM_DOMAIN }} \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }}

  smoke-tests:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci

    - name: Run smoke tests
      run: npm run test:smoke
      env:
        API_BASE_URL: ${{ secrets.API_BASE_URL }}
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}

    - name: Health check
      run: |
        # Check if services are responding
        curl -f ${{ secrets.API_BASE_URL }}/health || exit 1
        curl -f ${{ secrets.FRONTEND_URL }} || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, smoke-tests]
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Create deployment summary
      if: success()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: ${{ secrets.API_BASE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: ${{ secrets.FRONTEND_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY 